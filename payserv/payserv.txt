Автоматическая система платежей и проверок состоит из следующих компонентов:
payserv - сервис на Go который собственно выполняет логику проверок и выплат
dbgw - 	сервис на Go который является гейтвеем между payserv и базой данных,
	этот сервис никакой сложной логики не несет и не имеет доступа к 
	ключам кроме своего tls.
pscli - утилита для вызова сервисных команд в payserv по rpc а также для настроки и 
	управления базой данных
esman - утилита для управления защищенным хранилищем данных
zcashd - оффлайновая и модифицированная нода zcash используемая для подписи транзакций,
	 не имеет доступа к blockchain а также содержит модифицированную rpc команду 
	 s_signrawtransaction для подписи (с фиксом баги в zcashd связанной с Overwinter)

сревера в DigitalOcean:
payserv.minerall.io - payserv, dbgw, pscli, esman, zcashd (offline)
zcash-send - zcashd (online) - онлайновая нода для отправки платежей zcash
	нужна отдельная от майнинга, поскольку некоторые операции могут её блокировать на 
	несколько минут и даже часов.

PayServ хранит следующие связанные с ним файлы на локальном сервере:
/usr/bin/payserv - бинарник сервиса
/etc/payserv.conf - файл конфигурации, в котором хранятся адреса кошельков, кошельков итд
/lib/systemd/system/payserv.service - файл с параметрами запуска сервиса
/var/lib/payserv/checkpoints.user - хранилище чекпоинтов сгруппированных по user/coin
/var/lib/payserv/checkpoints.coin - хранилище чекпоинтов сгруппированных по coin
/var/lib/payserv/storage.prod - задается в конфиге, защищенное хранилище ключей
/var/lib/payserv/eth.nonce - кеш nonce

PayServ использует следующие таблицы в базе данных через dbgw:
finances_user_balance_checkpoints - (чтение, проверка, модификация) хранилище чекпоинтов по user/coin
finances_coin_checkpoints - (чтение, проверка, модификация) хранилище чекпоинтов по coin
finances_withdrawal_transaction - (чтение, проверка, модификация) транзакции для вывода средств
finances_proxypool_transactions - (чтение, проверка, модификация только при коррекциях)
finances_user_balance_transaction - (чтение, проверка, модификация только при коррекциях)
users_userwallets - (чтение, проверка)
coins_coin - (чтение, проверка)

DBGW хранит следующие связанные с ним файлы на локальном сервере:
/usr/bin/dbgw - бинарник сервиса
/etc/dbgw.conf - файл конфигурации, в котором хранятся адреса базы данных, tls ключи
/lib/systemd/system/dbgw.service - файл с параметрами запуска сервиса
/usr/share/dbgw/certs/imCA.TLS.CRT - задается в конфиге, сертификат imCA
/usr/share/dbgw/certs/DBGW.TLS.CRT - задается в конфиге, сертификат для tls
/usr/share/dbgw/certs/DBGW.TLS.KEY - задается в конфиге, ключ для tls

PSCli хранит следующие связанные с ним файлы на локальном сервере:
/usr/bin/pscli - бинарник
/etc/pscli.conf - файл конфигурации, в котором хранятся адреса базы данных, tls ключи

ESMan хранит следующие связанные с ним файлы на локальном сервере:
/usr/bin/esman - бинарник

Основные функции PayServ:
данный сервис работает принимает коннекты по rpc от сервиса который делает Виктор (blindenhund)
PayServ.Process(id) - вызывается для транзакций в статусе 'processing', производится проверка балансов, кошельков, монет, адресов связанных с данной транзакцией
	если найдены нестыковки сервис останавливается, возможные варианты ответа: ERROR, DECLINED, PENDING, APPROVED, а также обновляет чекпоинты

PayServ.Decline(id) - вызывается для транзакций в статусе 'pending', деклайнит указанную транзакцию, возможные варианты ответа: ERROR, DECLINED,
	а также обновляет чекпоинты

PayServ.Send(id) - вызывается для транзакций в статусе 'approved', 'sending', 'send_error', принудительно устанавливает статус 'sent' для данной транзакции, 
	возможные варианты ответа: ERROR, SENT, а также обновляет чекпоинты

PayServ.Approve(id) - вызывается для транзакций в статусе 'pending', 'approved', для монет ETH и ZEC производится попытка выплаты средств, для всех остальных устанавливается статус 'approved',
	возможные варианты ответа: ERROR, APPROVED, SEND_RETRY, SEND_ERROR, SENDING

PayServ.Resend(id) - вызывается для транзакций в статусе 'send_error', 'send_retry', для монет ETH и ZEC производится попытка выплаты средств, для всех остальных устанавливается статус 'approved',
	возможные варианты ответа: ERROR, APPROVED, SEND_RETRY, SEND_ERROR, SENDING

PayServ.Check(id) - вызывается для транзакций в статусе 'sending', для монет ETH и ZEC производится проверка состояния транзакции в blockchain, для всех остальных устанавливается статус 'sent',
	возможные варианты ответа: ERROR, SENDING, SEND_ERROR, SENT

Запуск PayServ:
в данный момент payserv и dbgw находятся на одном сервере payserv.minerall.io, для запуска необходимо выполнить следующие действия:
1. cd /root/go/src/github.com/seagiv/scripts/
2. ./rinit.sh
3. esman -manager -dir /root -n 1
4. дождаться коннекта (появления такой надписи ESM: key request from 127.0.0.1:50666, type "y" if you allow this, anything else if not:) и ответить 'y'
5. закрыть esman (Ctrl-C)
6. запустить проверки (выплаты в данный момент неактивны) 
	pscli -checkbalanceerrors - если что-то вывело это ошибки с которыми надо разбираться
	pscli -checkcoins - если что-то вывело это ошибки с которыми надо разбираться
	pscli -checkwallets - если что-то вывело это ошибки с которыми надо разбираться
7. если все ок, активировать выплаты pscli -enable
8. смотреть лог через journalctl -n 40 -f -u payserv